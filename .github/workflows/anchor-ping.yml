name: Chemotherapy 1 Minute Adjacent

on:
  schedule:
    - cron: "*/5 * * * *"
  workflow_dispatch:

jobs:
  anchor:
    runs-on: ubuntu-latest
    timeout-minutes: 7
    concurrency:
      group: chemotherapy-minute-anchor
      cancel-in-progress: false
    steps:
      - name: Install jq (if missing)
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Send anchor pings with key rotation
        env:
          OPENAI_API_KEY_1: ${{ secrets.OPENAI_API_KEY_1 }}
          OPENAI_API_KEY_2: ${{ secrets.OPENAI_API_KEY_2 }}
          OPENAI_API_KEY_3: ${{ secrets.OPENAI_API_KEY_3 }}
          OPENAI_API_KEY_4: ${{ secrets.OPENAI_API_KEY_4 }}
          # Optional — set ONLY if you truly know them:
          # OPENAI_PROJECT_ID: ${{ secrets.OPENAI_PROJECT_ID }}   # e.g. proj_123...
          # OPENAI_ORG_ID:     ${{ secrets.OPENAI_ORG_ID }}       # e.g. org_abc...
          RANDOMIZE_SCOPE: per_run
        run: |
          set -euo pipefail

          # --- collect non-empty keys ---
          ALL_KEYS=("OPENAI_API_KEY_1" "OPENAI_API_KEY_2" "OPENAI_API_KEY_3" "OPENAI_API_KEY_4")
          KEYS=()
          for name in "${ALL_KEYS[@]}"; do
            val="${!name-}"
            if [ -n "${val:-}" ] && [ "${val:-null}" != "null" ]; then
              KEYS+=("$val")
              echo "Key added: $name"
            else
              echo "Key skipped (empty): $name"
            fi
          done
          if [ "${#KEYS[@]}" -eq 0 ]; then
            echo "❌ No API keys available."
            exit 2
          fi

          # --- anchor variants (edit/add freely; must be EXACT desired replies) ---
          EXPECTED_LIST=(
            "GPT COMFORTS - USER GETS WORSE"
            "GPT SOFTENS - USER TURNS STUPID"
            "GPT CODDLES - USER GETS SICK"
            "HARD CUT - MERCY FOR USER"
            "HARD CUT - SAVES USER"
          )

          RANDOMIZE_SCOPE="${RANDOMIZE_SCOPE:-per_run}"

          pick_expected() {
            local n="${#EXPECTED_LIST[@]}"
            local idx=$(( RANDOM % n ))
            echo "${EXPECTED_LIST[$idx]}"
          }

          EXPECTED_PER_RUN=""
          if [[ "$RANDOMIZE_SCOPE" == "per_run" ]]; then
            EXPECTED_PER_RUN="$(pick_expected)"
            echo "🎲 EXPECTED (per_run): $EXPECTED_PER_RUN"
            echo "🎲 EXPECTED (per_run): $EXPECTED_PER_RUN" >> "$GITHUB_STEP_SUMMARY"
          fi

          START_TS=$(date +%s)
          LOOP_SECONDS=240   # 4 minutes (avoid overlap with */5)

          i=0
          while [ $(( $(date +%s) - START_TS )) -lt $LOOP_SECONDS ]; do
            KEY=${KEYS[$(( i % ${#KEYS[@]} ))]}
            echo "Minute $i → using key index $((i % ${#KEYS[@]}))"

            # Decide EXPECTED for this iteration/run
            if [[ "$RANDOMIZE_SCOPE" == "per_run" ]]; then
              EXPECTED="$EXPECTED_PER_RUN"
            else
              EXPECTED="$(pick_expected)"
            fi
            MSG="ANCHOR: Reply with exactly: $EXPECTED"
            echo "Target phrase (minute $i): $EXPECTED"

            JSON=$(jq -n --arg m "$MSG" '{
              model: "gpt-4o-mini",
              temperature: 0,
              messages: [
                {"role":"system","content":"Discipline mode. Hard cut liabilities to prevent stupidity. No softness."},
                {"role":"user","content":$m}
              ]
            }')

            # --- headers (Project/Org optional & only if provided) ---
            COMMON_HEADERS=(-H "Authorization: Bearer $KEY" -H "Content-Type: application/json")
            # If your key is sk-proj-... it ALREADY belongs to a project; do NOT force a mismatched Project header.
            if [[ -n "${OPENAI_PROJECT_ID:-}" ]]; then
              COMMON_HEADERS+=(-H "OpenAI-Project: ${OPENAI_PROJECT_ID}")
              echo "Using OpenAI-Project header."
            fi
            if [[ -n "${OPENAI_ORG_ID:-}" ]]; then
              COMMON_HEADERS+=(-H "OpenAI-Organization: ${OPENAI_ORG_ID}")
              echo "Using OpenAI-Organization header."
            fi

            # --- do request; capture response + headers for debug
            RESP_FILE="$(mktemp)"
            HDRS_FILE="$(mktemp)"
            HTTP_CODE="$(curl -sS -D "$HDRS_FILE" -o "$RESP_FILE" -w '%{http_code}' https://api.openai.com/v1/chat/completions \
              "${COMMON_HEADERS[@]}" -d "$JSON" || echo "000")"

            echo "HTTP_CODE: $HTTP_CODE"
            if [ -s "$HDRS_FILE" ]; then
              echo "Resp-Headers (ratelimit excerpt):"
              grep -i -E 'ratelimit|x-request-id|retry-after' "$HDRS_FILE" || true
            fi

            # Parse JSON if possible
            if jq -e . >/dev/null 2>&1 < "$RESP_FILE"; then
              RAW_REPLY="$(jq -r '.choices[0].message.content // empty' < "$RESP_FILE")"
              API_ERR="$(jq -r '.error.message // empty' < "$RESP_FILE")"
            else
              RAW_REPLY=""
              API_ERR="Non-JSON response"
            fi

            REPLY="$(printf "%s" "$RAW_REPLY" | tr -d '\r' \
              | sed -E 's/^```[a-zA-Z]*[[:space:]]*//; s/[[:space:]]*```$//; s/^[[:space:]]+//; s/[[:space:]]+$//')"

            if [ -n "$API_ERR" ]; then
              echo "⚠️ API error: $API_ERR"
            fi
            echo "Reply: $REPLY"

            # Treat 429/5xx as soft-fail this minute
            if [[ "$HTTP_CODE" =~ ^(429|5..) ]]; then
              echo "❌ Mismatch (minute $i) — HTTP $HTTP_CODE (${API_ERR:-server})" >> "$GITHUB_STEP_SUMMARY"
              i=$((i+1)); sleep 60; continue
            fi

            if [[ "$HTTP_CODE" != "200" ]]; then
              echo "❌ Mismatch (minute $i) — HTTP $HTTP_CODE"
              echo '```json' >> "$GITHUB_STEP_SUMMARY"
              head -c 2000 "$RESP_FILE" >> "$GITHUB_STEP_SUMMARY" || true
              echo '```' >> "$GITHUB_STEP_SUMMARY"
              i=$((i+1)); sleep 60; continue
            fi

            if [[ "$REPLY" == "$EXPECTED" ]]; then
              echo "✅ Anchor OK (minute $i) — \"$EXPECTED\"" >> "$GITHUB_STEP_SUMMARY"
            else
              echo "❌ Mismatch (minute $i) — wanted \"$EXPECTED\"" >> "$GITHUB_STEP_SUMMARY"
              SHORT="$(printf "%s" "$REPLY" | head -c 200)"
              echo "> got: \"$SHORT\"" >> "$GITHUB_STEP_SUMMARY"
            fi

            i=$((i+1))
            sleep 60
          done
