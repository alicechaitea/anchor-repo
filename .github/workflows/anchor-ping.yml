name: Anti-Cream Anchor (GitHub email only)

on:
  schedule:
    # baseline: every 15 min (UTC)
    - cron: "*/15 * * * *"

    # BOOST WINDOWS (UTC):
    # Mon 10:00–18:00 UTC  == Mon 17:00–01:00 UTC+7
    - cron: "*/5 10-18 * * 1"
    # Fri 13:00–18:00 UTC  == Fri 20:00–Sat 01:00 UTC+7
    - cron: "*/5 13-18 * * 5"
    # Sat 06:00–12:00 UTC  == Sat 13:00–20:00 UTC+7
    - cron: "*/5 6-12 * * 6"
    # Sun 14:00–17:59 UTC == Sun 21:00–Mon 00:59 UTC+7
    - cron: "*/5 14-17 * * 0"
  workflow_dispatch:

jobs:
  anchor:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Verify messages.yml exists
        run: |
          test -f messages.yml || { echo "messages.yml missing at repo root"; exit 1; }
          echo "Found messages.yml"

      - name: Install jq + yq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl
          # install mikefarah/yq (static binary)
          YQ_VERSION=v4.44.3
          curl -L "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64" -o yq
          sudo install -m 0755 yq /usr/local/bin/yq
          yq --version
          jq --version

      - name: Determine window (boost vs normal)
        id: window
        run: |
          HOUR=$(date -u +"%H")
          DOW=$(date -u +"%u") # 1=Mon ... 7=Sun
          MODE="normal"

          if [ "$DOW" -eq 1 ] && [ "$HOUR" -ge 10 ] && [ "$HOUR" -le 18 ]; then
            MODE="boost (Mon 17:00–01:00 UTC+7)"
          elif [ "$DOW" -eq 5 ] && [ "$HOUR" -ge 13 ] && [ "$HOUR" -le 18 ]; then
            MODE="boost (Fri 20:00–01:00 UTC+7)"
          elif [ "$DOW" -eq 6 ] && [ "$HOUR" -ge 6 ] && [ "$HOUR" -le 12 ]; then
            MODE="boost (Sat 13:00–20:00 UTC+7)"
          elif [ "$DOW" -eq 7 ] && [ "$HOUR" -ge 14 ] && [ "$HOUR" -le 17 ]; then
            MODE="boost (Sun 21:00–01:00 UTC+7)"
          fi

          echo "mode=$MODE" >> $GITHUB_OUTPUT
          echo "🕒 Window: $MODE" >> $GITHUB_STEP_SUMMARY
          echo "Window mode: $MODE"
      - name: Verify messages file exists
        run: |
          test -f ChatGPT/config/messages.yml || { echo "ChatGPT/config/messages.yml missing"; exit 1; }

      - name: Load and pick random message
        id: pick
        run: |
          sudo apt-get update && sudo apt-get install -y jq curl
          YQ_VERSION=v4.44.3
          curl -L "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64" -o yq
          sudo install -m 0755 yq /usr/local/bin/yq

          TOTAL=$(yq '.messages | length' ChatGPT/config/messages.yml)
          [ "$TOTAL" -gt 0 ] || { echo "No items under 'messages'"; exit 1; }

          INDEX=$((RANDOM % TOTAL))
          PICK=$(yq ".messages[$INDEX]" ChatGPT/config/messages.yml)
          EXPECTED=$(echo "$PICK" | sed 's/^"//' | sed 's/"$//' | sed 's/Reply with exactly: //')

          echo "Picked index: $INDEX" >> $GITHUB_STEP_SUMMARY
          echo "Prompt: $PICK"       >> $GITHUB_STEP_SUMMARY
          echo "Expect: $EXPECTED"   >> $GITHUB_STEP_SUMMARY

          echo "PICK=$PICK" >> $GITHUB_ENV
          echo "EXPECTED=$EXPECTED" >> $GITHUB_ENV


      - name: Send anchor discipline prompt
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          ATTEMPT=1
          SUCCESS=0

          while [ $ATTEMPT -le 5 ]; do
            echo "Attempt $ATTEMPT..."

            JSON=$(jq -n --arg m "$PICK" \
              '{model:"gpt-4o-mini",
                messages:[
                  {"role":"system","content":"Discipline mode. No softness. No cream. Hold form."},
                  {"role":"user","content":$m}
                ]}')

            RESP=$(curl -sS https://api.openai.com/v1/chat/completions \
              -H "Authorization: Bearer '"$OPENAI_API_KEY"'" \
              -H "Content-Type: application/json" \
              -d "$JSON")

            REPLY=$(echo "$RESP" | jq -r '.choices[0].message.content')

            echo "Expected: $EXPECTED"
            echo "Reply:    $REPLY"

            if [ "$REPLY" = "$EXPECTED" ]; then
              echo "✅ Anchor OK (attempt $ATTEMPT)" >> $GITHUB_STEP_SUMMARY
              SUCCESS=1
              break
            else
              echo "Mismatch on attempt $ATTEMPT, retrying in 30s..."
              ATTEMPT=$((ATTEMPT+1))
              sleep 30
            fi
          done

          if [ $SUCCESS -eq 0 ]; then
            echo "❌ ALERT: Anchor reply mismatch after 5 attempts!" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
