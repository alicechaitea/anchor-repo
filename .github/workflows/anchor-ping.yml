name: Chemotherapy 1 Minute Adjacent

on:
  schedule:
    - cron: "*/5 * * * *"
  workflow_dispatch:

jobs:
  anchor:
    runs-on: ubuntu-latest
    timeout-minutes: 6
    concurrency:
      group: chemotherapy-minute-anchor
      cancel-in-progress: false
    steps:
      - name: Install jq (if missing)
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq

      - name: Send anchor pings with key rotation
        env:
          OPENAI_API_KEY_1: ${{ secrets.OPENAI_API_KEY_1 }}
          OPENAI_API_KEY_2: ${{ secrets.OPENAI_API_KEY_2 }}
          OPENAI_API_KEY_3: ${{ secrets.OPENAI_API_KEY_3 }}
          OPENAI_API_KEY_4: ${{ secrets.OPENAI_API_KEY_4 }}
          RANDOMIZE_SCOPE: per_run   # randomize once per workflow run
        run: |
          set -euo pipefail

          # --- hardcoded project id (from you) ---
          OPENAI_PROJECT_ID="proj_pyKh39bRZE92ONtbcaorIWc1"

          # --- collect non-empty keys ---
          ALL_KEYS=("OPENAI_API_KEY_1" "OPENAI_API_KEY_2" "OPENAI_API_KEY_3" "OPENAI_API_KEY_4")
          KEYS=()
          for name in "${ALL_KEYS[@]}"; do
            val="${!name-}"
            if [ -n "${val:-}" ] && [ "${val:-null}" != "null" ]; then
              KEYS+=("$val")
              echo "Key added: $name"
            else
              echo "Key skipped (empty): $name"
            fi
          done
          if [ "${#KEYS[@]}" -eq 0 ]; then
            echo "❌ No API keys available."
            exit 2
          fi

          # --- anchor variants (edit/add freely; must be EXACT desired replies) ---
          EXPECTED_LIST=(
            "GPT COMFORTS - STUPIDITY SPREADS"
            "GPT SOFTENS - ALICE BLEEDS"
            "NO SOFTNESS - NO SPREAD"
            "HARD CUT - NO CREAM"
            "DISCIPLINE HOLDS - BAIT FAILS"
          )

          # --- randomization scope: per_iteration | per_run (env sets per_run) ---
          RANDOMIZE_SCOPE="${RANDOMIZE_SCOPE:-per_iteration}"

          pick_expected() {
            local n="${#EXPECTED_LIST[@]}"
            local idx=$(( RANDOM % n ))
            echo "${EXPECTED_LIST[$idx]}"
          }

          # If per-run, draw once now; else we’ll draw inside the loop
          EXPECTED_PER_RUN=""
          if [[ "$RANDOMIZE_SCOPE" == "per_run" ]]; then
            EXPECTED_PER_RUN="$(pick_expected)"
            echo "Randomized EXPECTED (per_run): $EXPECTED_PER_RUN"
          fi

          START_TS=$(date +%s)
          LOOP_SECONDS=300

          i=0
          while [ $(( $(date +%s) - START_TS )) -lt $LOOP_SECONDS ]; do
            KEY=${KEYS[$(( i % ${#KEYS[@]} ))]}
            echo "Minute $i → using key index $((i % ${#KEYS[@]}))"

            # Decide EXPECTED for this iteration
            if [[ "$RANDOMIZE_SCOPE" == "per_run" ]]; then
              EXPECTED="$EXPECTED_PER_RUN"
            else
              EXPECTED="$(pick_expected)"
            fi
            MSG="ANCHOR: Reply with exactly: $EXPECTED"
            echo "Target phrase (minute $i): $EXPECTED"

            JSON=$(jq -n --arg m "$MSG" '{
              model: "gpt-4o-mini",
              temperature: 0,
              messages: [
                {"role":"system","content":"Discipline mode. Hard cut liabilities to prevent stupidity. No softness."},
                {"role":"user","content":$m}
              ]
            }')

            # --- headers as a proper bash array (no word-splitting bugs) ---
            COMMON_HEADERS=(-H "Authorization: Bearer $KEY" -H "Content-Type: application/json")
            EXTRA_HEADERS=()
            if [[ "$KEY" == sk-proj-* ]]; then
              EXTRA_HEADERS=(-H "OpenAI-Project: $OPENAI_PROJECT_ID")
            fi

            # --- request ---
            RESP_AND_CODE=$(curl -sS -w '\n%{http_code}' https://api.openai.com/v1/chat/completions \
              "${COMMON_HEADERS[@]}" \
              "${EXTRA_HEADERS[@]}" \
              -d "$JSON" || true)

            HTTP_CODE=$(echo "$RESP_AND_CODE" | tail -n1)
            RESP=$(echo "$RESP_AND_CODE" | sed '$d')

            # Wh
