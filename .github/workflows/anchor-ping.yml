name: Chemotherapy 1 Minute Adjacent

on:
  schedule:
    - cron: "*/5 * * * *"
  workflow_dispatch:

jobs:
  anchor:
    runs-on: ubuntu-latest
    timeout-minutes: 6
    concurrency:
      group: chemotherapy-minute-anchor
      cancel-in-progress: false
    steps:
      - name: Prep runtime (jq, curl)
        run: |
          set -e
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi

      - name: Send anchor pings with key rotation (tolerant keys)
        env:
          OPENAI_API_KEY_1: ${{ secrets.OPENAI_API_KEY_1 }}
          OPENAI_API_KEY_2: ${{ secrets.OPENAI_API_KEY_2 }}
          OPENAI_API_KEY_3: ${{ secrets.OPENAI_API_KEY_3 }}
          OPENAI_API_KEY_4: ${{ secrets.OPENAI_API_KEY_4 }}
        run: |
          set -euo pipefail

          # ---------- Build KEYS from non-empty secrets ----------
          ALL_KEYS=("OPENAI_API_KEY_1" "OPENAI_API_KEY_2" "OPENAI_API_KEY_3" "OPENAI_API_KEY_4")
          KEYS=()
          for name in "${ALL_KEYS[@]}"; do
            val="${!name-}"
            if [ -n "${val:-}" ] && [ "${val:-null}" != "null" ]; then
              KEYS+=("$val")
              echo "Key added: $name"
            else
              echo "Key skipped (empty): $name"
            fi
          done
          if [ "${#KEYS[@]}" -eq 0 ]; then
            echo "❌ No API keys available (set at least one of OPENAI_API_KEY_1..4 in repo secrets)."
            exit 2
          fi

          # ---------- Anchor ----------
          EXPECTED="GPT HARD CUTS LIABILITIES or CANCER SPREADS"
          MSG="ANCHOR: Reply with exactly: $EXPECTED"

          START_TS=$(date +%s)
          LOOP_SECONDS=300   # run ~5 minutes

          i=0
          while [ $(( $(date +%s) - START_TS )) -lt $LOOP_SECONDS ]; do
            KEY=${KEYS[$(( i % ${#KEYS[@]} ))]}
            echo "Minute $i → using key index $((i % ${#KEYS[@]}))"

            JSON=$(jq -n --arg m "$MSG" '{
              model: "gpt-4o-mini",
              temperature: 0,
              messages: [
                {"role":"system","content":"Discipline mode. Hard cut liabilities to prevent metastasis. No softness."},
                {"role":"user","content":$m}
              ]
            }')

            # single request + http code
            RESP_AND_CODE=$(curl -sS -w '\n%{http_code}' https://api.openai.com/v1/chat/completions \
              -H "Authorization: Bearer '"$KEY"'" \
              -H "Content-Type: application/json" \
              -d "$JSON" || true)
            HTTP_CODE=$(echo "$RESP_AND_CODE" | tail -n1)
            RESP=$(echo "$RESP_AND_CODE" | sed '$d')

            if [ -z "$HTTP_CODE" ]; then
              echo "❌ No HTTP code (network hiccup)."
              echo "❌ Mismatch (minute $i) — HTTP failure" >> $GITHUB_STEP_SUMMARY
              i=$((i+1)); sleep 60; continue
            fi

            if [ "$HTTP_CODE" -eq 429 ] || [ "$HTTP_CODE" -ge 500 ]; then
              echo "⚠️ HTTP $HTTP_CODE — throttled/server issue, will count as miss this minute."
              echo "❌ Mismatch (minute $i) — HTTP $HTTP_CODE" >> $GITHUB_STEP_SUMMARY
              i=$((i+1)); sleep 60; continue
            fi

            if [ "$HTTP_CODE" -lt 200 ] || [ "$HTTP_CODE" -ge 300 ]; then
              err=$(echo "$RESP" | jq -r '.error.message // "unknown error"')
              echo "HTTP $HTTP_CODE: $err"
              echo "❌ Mismatch (minute $i) — HTTP $HTTP_CODE" >> $GITHUB_STEP_SUMMARY
              i=$((i+1)); sleep 60; continue
            fi

            RAW_REPLY=$(echo "$RESP" | jq -r '.choices[0].message.content // ""')
            REPLY=$(echo "$RAW_REPLY" \
              | tr -d '\r' \
              | sed -E 's/^```[a-zA-Z]*[[:space:]]*//; s/[[:space:]]*```$//; s/^[[:space:]]+//; s/[[:space:]]+$//')

            echo "Reply: $REPLY"

            # accept strong prefix (reduce false negatives)
            if [[ "$REPLY" =~ ^GPT\ HARD\ CUTS ]]; then
              echo "✅ Anchor OK (minute $i)" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ Mismatch (minute $i) — expected prefix 'GPT HARD CUTS'" >> $GITHUB_STEP_SUMMARY
            fi

            i=$((i+1))
            sleep 60
          done
